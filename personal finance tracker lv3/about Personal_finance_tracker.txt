import tkinter as tk
from tkinter import messagebox
import json
import os
import openpyxl
import sqlite3

# Global variables
expense_data = []
DATA_FILE = "expenses.json"
EXCEL_FILE = "expenses.xlsx"
TEXT_FILE = "expenses.txt"
DB_FILE = "expenses.db"

# Load expense data from file if it exists
def load_expenses():
    global expense_data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as file:
            expense_data = json.load(file)

# Save expense data to file
def save_expenses():
    with open(DATA_FILE, 'w') as file:
        json.dump(expense_data, file)

# Get current date
def get_current_date():
    return tk.StringVar(value="YYYY-MM-DD")

# Add a new expense entry
def add_expense():
    amount = amount_entry.get()
    description = description_entry.get()
    date = date_entry.get()
    category = category_var.get()

    if not amount or not description or not date or not category:
        messagebox.showerror("Error", "All fields are required.")
        return

    try:
        amount = float(amount)
    except ValueError:
        messagebox.showerror("Error", "Invalid amount.")
        return

    expense = {
        "amount": amount,
        "description": description,
        "date": date,
        "category": category
    }
    expense_data.append(expense)
    save_expenses()
    messagebox.showinfo("Success", "Expense added successfully.")

# Edit an existing expense entry
def edit_expense():
    def submit_edit():
        selected_index = expense_listbox.curselection()
        if not selected_index:
            messagebox.showerror("Error", "No expense selected.")
            return
        selected_expense = expense_data[selected_index[0]]

        amount = amount_entry.get()
        description = description_entry.get()
        date = date_entry.get()
        category = category_var.get()

        if not amount or not description or not date or not category:
            messagebox.showerror("Error", "All fields are required.")
            return

        try:
            amount = float(amount)
        except ValueError:
            messagebox.showerror("Error", "Invalid amount.")
            return

        selected_expense["amount"] = amount
        selected_expense["description"] = description
        selected_expense["date"] = date
        selected_expense["category"] = category

        save_expenses()
        messagebox.showinfo("Success", "Expense edited successfully.")
        edit_window.destroy()

    edit_window = tk.Toplevel()
    edit_window.title("Edit Expense")

    expense_label = tk.Label(edit_window, text="Select Expense to Edit:")
    expense_label.grid(row=0, column=0, padx=10, pady=5)
    expense_listbox = tk.Listbox(edit_window, selectmode=tk.SINGLE)
    expense_listbox.grid(row=1, column=0, columnspan=2, padx=10, pady=5)
    for expense in expense_data:
        expense_listbox.insert(tk.END, f"{expense['description']} - {expense['amount']}")

    amount_label = tk.Label(edit_window, text="Amount:")
    amount_label.grid(row=2, column=0, padx=10, pady=5)
    amount_entry = tk.Entry(edit_window)
    amount_entry.grid(row=2, column=1, padx=10, pady=5)

    description_label = tk.Label(edit_window, text="Description:")
    description_label.grid(row=3, column=0, padx=10, pady=5)
    description_entry = tk.Entry(edit_window)
    description_entry.grid(row=3, column=1, padx=10, pady=5)

    date_label = tk.Label(edit_window, text="Date (YYYY-MM-DD):")
    date_label.grid(row=4, column=0, padx=10, pady=5)
    date_entry = tk.Entry(edit_window)
    date_entry.grid(row=4, column=1, padx=10, pady=5)

    category_label = tk.Label(edit_window, text="Category:")
    category_label.grid(row=5, column=0, padx=10, pady=5)
    category_var = tk.StringVar()
    category_var.set(list(categories)[0])
    category_option = tk.OptionMenu(edit_window, category_var, *categories)
    category_option.grid(row=5, column=1, padx=10, pady=5)

    submit_button = tk.Button(edit_window, text="Submit", command=submit_edit)
    submit_button.grid(row=6, column=0, columnspan=2, padx=10, pady=10, sticky="we")

# Delete an existing expense entry
def delete_expense():
    selected_index = expense_listbox.curselection()
    if not selected_index:
        messagebox.showerror("Error", "No expense selected.")
        return
    expense_data.pop(selected_index[0])
    save_expenses()
    messagebox.showinfo("Success", "Expense deleted successfully.")

# View summary of expenses
def view_summary():
    total_spent = 0
    category_totals = {}

    for expense in expense_data:
        total_spent += expense["amount"]
        category = expense["category"]
        category_totals[category] = category_totals.get(category, 0) + expense["amount"]

    summary_text = f"Total Amount Spent: ${total_spent:.2f}\n\nCategory Breakdown:\n"
    for category, amount in category_totals.items():
        summary_text += f"{category.capitalize()}: ${amount:.2f}\n"

    summary_window = tk.Toplevel()
    summary_window.title("Expense Summary")
    summary_label = tk.Label(summary_window, text=summary_text, justify=tk.LEFT)
    summary_label.pack(padx=10, pady=10)

# Export expenses to Excel
def export_to_excel():
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = "Expenses"
    headers = ["Amount", "Description", "Date", "Category"]
    sheet.append(headers)
    for expense in expense_data:
        row = [expense["amount"], expense["description"], expense["date"], expense["category"]]
        sheet.append(row)
    workbook.save(EXCEL_FILE)
    messagebox.showinfo("Success", f"Expenses exported to {EXCEL_FILE}.")

# Export expenses to text file
def export_to_text():
    with open(TEXT_FILE, "w") as file:
        for expense in expense_data:
            line = ",".join([str(expense[key]) for key in ["amount", "description", "date", "category"]])
            file.write(line + "\n")
    messagebox.showinfo("Success", f"Expenses exported to {TEXT_FILE}.")

# Export expenses to SQLite database
def export_to_database():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS expenses (
                        id INTEGER PRIMARY KEY,
                        amount REAL,
                        description TEXT,
                        date TEXT,
                        category TEXT)''')
    for expense in expense_data:
        cursor.execute('''INSERT INTO expenses (amount, description, date, category)
                          VALUES (?, ?, ?, ?)''',
                       (expense["amount"], expense["description"], expense["date"], expense["category"]))
    conn.commit()
    conn.close()
    messagebox.showinfo("Success", f"Expenses exported to {DB_FILE}.")

# Load categories
categories = {"Food", "Transportation", "Utilities", "Entertainment", "Other"}

# Load expense data from file
load_expenses()

# Create main window
main_window = tk.Tk()
main_window.title("Expense Tracker")

# Add Expense Section
add_frame = tk.Frame(main_window)
add_frame.pack(pady=10)

amount_label = tk.Label(add_frame, text="Amount:")
amount_label.grid(row=0, column=0, padx=10, pady=5)
amount_entry = tk.Entry(add_frame)
amount_entry.grid(row=0, column=1, padx=10, pady=5)

description_label = tk.Label(add_frame, text="Description:")
description_label.grid(row=1, column=0, padx=10, pady=5)
description_entry = tk.Entry(add_frame)
description_entry.grid(row=1, column=1, padx=10, pady=5)

date_label = tk.Label(add_frame, text="Date (YYYY-MM-DD):")
date_label.grid(row=2, column=0, padx=10, pady=5)
date_entry = tk.Entry(add_frame, textvariable=get_current_date())
date_entry.grid(row=2, column=1, padx=10, pady=5)

category_label = tk.Label(add_frame, text="Category:")
category_label.grid(row=3, column=0, padx=10, pady=5)
category_var = tk.StringVar()
category_var.set(list(categories)[0])
category_option = tk.OptionMenu(add_frame, category_var, *categories)
category_option.grid(row=3, column=1, padx=10, pady=5)

add_button = tk.Button(add_frame, text="Add Expense", command=add_expense)
add_button.grid(row=4, column=0, columnspan=2, padx=10, pady=10, sticky="we")

# Expense List Section
expense_list_frame = tk.Frame(main_window)
expense_list_frame.pack(pady=10)

expense_list_label = tk.Label(expense_list_frame, text="Expense List:")
expense_list_label.grid(row=0, column=0, padx=10, pady=5)

expense_listbox = tk.Listbox(expense_list_frame, selectmode=tk.SINGLE)
expense_listbox.grid(row=1, column=0, padx=10, pady=5)
for expense in expense_data:
    expense_listbox.insert(tk.END, f"{expense['description']} - {expense['amount']}")

# Buttons Section
button_frame = tk.Frame(main_window)
button_frame.pack(pady=10)

edit_button = tk.Button(button_frame, text="Edit Expense", command=edit_expense)
edit_button.grid(row=0, column=0, padx=10, pady=5)

delete_button = tk.Button(button_frame, text="Delete Expense", command=delete_expense)
delete_button.grid(row=0, column=1, padx=10, pady=5)

view_summary_button = tk.Button(button_frame, text="View Summary", command=view_summary)
view_summary_button.grid(row=0, column=2, padx=10, pady=5)

export_excel_button = tk.Button(button_frame, text="Export to Excel", command=export_to_excel)
export_excel_button.grid(row=1, column=0, padx=10, pady=5)

export_text_button = tk.Button(button_frame, text="Export to Text", command=export_to_text)
export_text_button.grid(row=1, column=1, padx=10, pady=5)

export_db_button = tk.Button(button_frame, text="Export to SQLite", command=export_to_database)
export_db_button.grid(row=1, column=2, padx=10, pady=5)

main_window.mainloop()
